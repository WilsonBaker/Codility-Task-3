{
	"info": {
		"_postman_id": "7a67cf40-b82f-4cb0-b35b-6a29563dcdb8",
		"name": "COVID19 the game - villain",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "15605756"
	},
	"item": [
		{
			"name": "/auth/user/register 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{Username}}\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/user/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth/user/register 400 user exists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 because of existing user\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{Username}}\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/user/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth/user/register 400 blank username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 because of blank username/password\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct error message received\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Username and Password are required\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"\",\r\n  \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/user/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth/user/login 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check response contains non-null token and correct expiry\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.be.not.null;\r",
							"    pm.expect(jsonData.expiresIn).to.eql(\"3 min\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{Username}}\",\r\n  \"password\": \"string\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/user/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth/user/login 400 wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 because of wrong password\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct error message received\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Username or Password is incorrect\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{Username}}\",\r\n  \"password\": \"wrong\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/user/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth/user/login 400 no password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 because of no password\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct error message received\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Password is required\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{Username}}\",\r\n  \"password\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/user/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/auth/user/login 400 no username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400 because of no username\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Correct error message received\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Username is required\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"\",\r\n  \"password\": \"test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/auth/user/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"auth",
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/v1/user 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/v1/user 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Check response contains correct status and message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.status).to.eql(\"success\")\r",
							"    pm.expect(jsonData.message).to.eql(\"User added.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{Username}}\",\r\n  \"score\": \"1000\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/v1/user 204",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"username\": \"{{Username}}\",\r\n  \"score\": \"{{Score}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/user",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "/v1/user/username 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check response contains correct username and score\", function () {\r",
							"    const username = pm.environment.get(\"Username\");\r",
							"    const score = parseInt(pm.environment.get(\"Score\"));\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].username).to.eql(username)\r",
							"    pm.expect(jsonData[0].score).to.eql(score);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const username = pm.environment.get(\"Username\");\r",
							"const auth_token = pm.environment.get(\"auth_key\");\r",
							"\r",
							"const postRequest = {\r",
							"  url: 'https://supervillain.herokuapp.com/auth/user/login',\r",
							"  method: 'POST',\r",
							"  timeout: 0,\r",
							"  header: {\r",
							"    \"Content-Type\": \"application/x-www-form-urlencoded\",\r",
							"    \"Authorization\": auth_token\r",
							"  },\r",
							"  body: {\r",
							"    mode: 'urlencoded',\r",
							"    urlencoded: [\r",
							"        {key:\"username\", value: username},\r",
							"        {key:\"password\", value: \"string\"},\r",
							"    ]}\r",
							"};\r",
							"pm.sendRequest(postRequest, function (err, res) {\r",
							"    var responseJson = res.json();\r",
							"    console.log(responseJson);\r",
							"    pm.environment.set('USER_TOKEN', responseJson['token']);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "apikey",
					"apikey": [
						{
							"key": "value",
							"value": "{{USER_TOKEN}}",
							"type": "string"
						},
						{
							"key": "in",
							"value": "header",
							"type": "string"
						},
						{
							"key": "key",
							"value": "Authorization",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/v1/user/{{Username}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"v1",
						"user",
						"{{Username}}"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{auth_key}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}